// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply plugin: 'com.gradle.build-scan'
apply from: 'dependencies.gradle'
apply from: "scripts/dependencies-modules.gradle"

buildscript {
    apply from: 'dependencies.gradle'
    repositories {
        google()
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath 'com.gradle:build-scan-plugin:2.0.2'
        classpath 'com.android.tools.build:gradle:3.5.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$toolVersions.kotlin_version"
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        
    }
}

subprojects {
    pluginManager.withPlugin("kotlin-kapt") {
        kapt {
            useBuildCache = true
            correctErrorTypes = true
            arguments {
                arg('dagger.formatGeneratedSource', 'disabled')
                arg('dagger.gradle.incremental', 'enabled')
            }
        }
    }

    pluginManager.withPlugin("kotlin-android") {
        android {
            kotlinOptions {
                jvmTarget = "1.8"
                javaParameters = true
            }

            compileOptions {
                sourceCompatibility = '1.8'
                targetCompatibility = '1.8'
            }
        }
    }

    tasks.withType(Test) {
        maxParallelForks = Runtime.runtime.availableProcessors() / 2
    }
}


task clean(type: Delete) {
    delete rootProject.buildDir
}

tasks.withType(JavaCompile) {
    options.incremental = true // one flag, and things will get MUCH faster
}

ext.localproperties = new Properties()
localproperties.load(project.rootProject.file("local.properties").newDataInputStream())

def isFuncEnabled(key) {
    return localproperties.getProperty(key, "false") == "true"
}

buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
    publishAlwaysIf(isFuncEnabled("buildScan"))
}